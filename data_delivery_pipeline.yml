---
parameters:
  - name: VarGroup
    displayName: Variable group
    type: string
    default: '' # Added default value for validation
  - name: Environment
    displayName: Environment to use
    type: string
    default: '' # Added default value for validation
  - name: SurveyType
    displayName: Survey type
    type: string
    default: '' # Added default value for validation
  - name: Questionnaires
    displayName: Questionnaires separated by commas
    default: ' ' # Space required or it breaks Azure DevOps !?

trigger: none
pr: none
variables:
  - group: ${{parameters.VarGroup}}
  - name: SurveyType
    value: ${{parameters.SurveyType}}
  - name: Questionnaires
    value: ${{parameters.Questionnaires}}
  - name: ProcessingPath
    value: c:\blaise\temp\datadelivery\${{parameters.SurveyType}}
stages:
  - stage: DataDelivery
    displayName: Data delivery
    jobs:
      - deployment: DataDelivery
        timeoutInMinutes: 0
        environment:
          name: ${{parameters.Environment}}
          resourceType: virtualMachine
          tags: data-delivery
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: DownloadSecureFile@1
                  displayName: Download GCP key
                  name: gcpkey
                  inputs:
                    secureFile: ons-blaise-v2-shared-221e50eb36c7.json
                - task: PowerShell@2
                  displayName: Register Blaise
                  inputs:
                    filePath: $(Agent.BuildDirectory)/s/scripts/RegisterBlaise.ps1
                    arguments: -BLAISE_LICENSE_KEY $(ENV_BLAISE_LICENSE_KEY) -BLAISE_ACTIVATION_CODE
                      $(ENV_BLAISE_ACTIVATION_CODE)
                    pwsh: true
                - task: PowerShell@2
                  displayName: Download Manipula and 7-Zip
                  inputs:
                    targetType: inline
                    script: |
                      try {
                        Write-Host "‚öôÔ∏è Starting GCP authentication with shared project service account..."
                        # Clean up any old shared-config if present
                        if (gcloud config configurations list --format="value(name)" | Select-String -Quiet "shared-config") {
                          Write-Host "üßπ Existing shared-config found, deleting..."
                          gcloud config configurations delete shared-config --quiet
                        } else {
                          Write-Host "‚úÖ No existing shared-config found"
                        }
                        # Create and activate new shared-config
                        Write-Host "üÜï Creating and activating shared-config..."
                        gcloud config configurations create shared-config --activate --quiet
                        # Authenticate with service account
                        Write-Host "üîê Authenticating with service account $env:ENV_SHARED_SERVICE_ACCOUNT"
                        gcloud auth activate-service-account $env:ENV_SHARED_SERVICE_ACCOUNT --key-file="$(gcpkey.secureFilePath)" --quiet
                        Write-Host "üì¶ Downloading Manipula package..."
                        gsutil cp gs://$env:ENV_SHARED_BUCKET/Manipula_Package_5_14_6.zip `
                          "$env:ProcessingPath\Manipula.zip"
                        Write-Host "ü§ê Downloading 7-Zip executable..."
                        gsutil cp gs://$env:ENV_SHARED_BUCKET/7za.exe `
                          "$env:ProcessingPath\7za.exe"
                        Write-Host "‚úÖ Download completed successfully!"
                      }
                      catch {
                        Write-Host "üö® ERROR during download process!"
                        Write-Error "‚ùå $_"
                        exit 1
                      }
                      finally {
                        Write-Host "üîÅ Reverting GCP authentication back to VM service account..."
                        # Check if default config exists
                        if (-not (gcloud config configurations list --format="value(name)" | Select-String -Quiet "default")) {
                          Write-Host "‚ö†Ô∏è No default configuration found, creating it now..."
                          gcloud config configurations create default --quiet
                        } else {
                          Write-Host "‚úÖ default configuration already exists"
                        }
                        Write-Host "üîÑ Activating default configuration..."
                        gcloud config configurations activate default --quiet
                        # Delete shared-config
                        if (gcloud config configurations list --format="value(name)" | Select-String -Quiet "shared-config") {
                          Write-Host "üßπ Cleaning up temporary shared-config..."
                          gcloud config configurations delete shared-config --quiet
                        } else {
                          Write-Host "‚úÖ No shared-config left to delete"
                        }
                        Write-Host "üèÅ Authentication restored to default service account"
                      }
                - task: PowerShell@2
                  displayName: Set-up processing folder
                  inputs:
                    targetType: inline
                    script: |
                      New-Item -ItemType Directory -Force -Path $env:ProcessingPath
                      Add-MpPreference -ExclusionProcess c:\dev\agent
                      Add-MpPreference -ExclusionProcess Manipula.exe
                      Add-MpPreference -ExclusionProcess InstrumentBuilder.exe
                - task: PowerShell@2
                  displayName: Run data delivery
                  inputs:
                    filePath: $(Agent.BuildDirectory)/s/scripts/DeliverData.ps1
                    pwsh: true
                - task: PowerShell@2
                  displayName: Clean-up processing folder
                  inputs:
                    targetType: inline
                    script: |-
                      Remove-Item -Recurse -Force $env:ProcessingPath
                      Remove-MpPreference -ExclusionProcess c:\dev\agent
                      Remove-MpPreference -ExclusionProcess Manipula.exe
                      Remove-MpPreference -ExclusionProcess InstrumentBuilder.exe
